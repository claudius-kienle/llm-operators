{"CutObject_0": "(:action CutObject_0\n        :parameters (?r - receptacle ?a - agent ?l - location ?o - object)\n\n        :precondition (and \n\t\t(receptacleType ?r CounterTopType)\n\t\t(atLocation ?a ?l)\n\t\t(receptacleAtLocation ?r ?l)\n\t\t(holds ?a ?o)\n\t\t)\n        :effect (and \n\t\t(isSliced ?o)\n\t\t)\n)", "CoolObject_0": "(:action CoolObject_0\n        :parameters (?r - receptacle ?a - agent ?l - location ?o - object)\n\n        :precondition (and \n\t\t(receptacleType ?r FridgeType)\n\t\t(atLocation ?a ?l)\n\t\t(receptacleAtLocation ?r ?l)\n\t\t(inReceptacle ?o ?r)\n\t\t(isHot ?o)\n\t\t)\n        :effect (and \n\t\t(isCool ?o)\n\t\t)\n)", "HeatObject_0": "(:action HeatObject_0\n        :parameters (?a - agent ?o - object)\n\n        :precondition (and \n\t\t(holds ?a ?o)\n\t\t(heatable ?o)\n\t\t(cleanable ?o)\n\t\t(coolable ?o)\n\t\t)\n        :effect (and \n\t\t(isHot ?o)\n\t\t(not (isCool ?o))\n\t\t)\n)", "DropObject_0": "(:action DropObject_0\n        :parameters (?a - agent ?l - location ?o - object)\n\n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t(holds ?a ?o)\n\t\t)\n        :effect (and \n\t\t(not (holds ?a ?o))\n\t\t)\n)", "CookObject_0": "(:action CookObject_0\n        :parameters (?r - receptacle ?a - agent ?l - location ?o - object)\n\n        :precondition (and \n\t\t(receptacleType ?r StoveBurnerType)\n\t\t(atLocation ?a ?l)\n\t\t(receptacleAtLocation ?r ?l)\n\t\t(holds ?a ?o)\n\t\t)\n        :effect (and \n\t\t(holds ?a ?o)\n\t\t)\n)", "ChillObject_0": "(:action ChillObject_0\n        :parameters (?r - receptacle ?a - agent ?l - location ?o - object)\n\n        :precondition (and \n\t\t(receptacleType ?r FridgeType)\n\t\t(atLocation ?a ?l)\n\t\t(receptacleAtLocation ?r ?l)\n\t\t(holds ?a ?o)\n\t\t)\n        :effect (and \n\t\t(isCool ?o)\n\t\t)\n)", "SwitchObjects_0": "(:action SwitchObjects_0\n        :parameters (?a - agent ?l - location ?o - object)\n\n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t(objectAtLocation ?o ?l)\n\t\t(objectType ?o LightSwitchType)\n\t\t)\n        :effect (and \n\t\t(isOn ?o)\n\t\t(isClean ?o)\n\t\t)\n)", "OpenContainer_0": "(:action OpenContainer_0\n        :parameters (?a - agent ?l - location ?r - receptacle)\n\n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t(receptacleAtLocation ?r ?l)\n\t\t)\n        :effect (and \n\t\t(opened ?r)\n\t\t)\n)", "CloseContainer_0": "(:action CloseContainer_0\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n\n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t(receptacleAtLocation ?r ?l)\n\t\t)\n        :effect (and \n\t\t(objectAtLocation ?o ?l)\n\t\t(not (inReceptacle ?o ?r))\n\t\t)\n)", "RemoveObject_0": "(:action RemoveObject_0\n        :parameters (?a - agent ?o - object ?rStart - receptacle ?rEnd - receptacle)\n\n        :precondition (and \n\t\t(holds ?a ?o)\n\t\t(inReceptacle ?o ?rStart)\n\t\t)\n        :effect (and \n\t\t(holds ?a ?o)\n\t\t(inReceptacle ?o ?rEnd)\n\t\t(not (inReceptacle ?o ?rStart))\n\t\t)\n)", "GET_0": "(:action GET_0\n        :parameters (?r - receptacle ?lStart - location ?o - object ?lEnd - location)\n\n        :precondition (and \n\t\t(receptacleAtLocation ?r ?lStart)\n\t\t(inReceptacle ?o ?r)\n\t\t(objectAtLocation ?o ?lEnd)\n\t\t)\n        :effect (and \n\t\t(not (inReceptacle ?o ?r))\n\t\t)\n)", "PUT_0": "(:action PUT_0\n        :parameters (?c - receptacle ?l - location ?o - object)\n\n        :precondition (and \n\t\t(receptacleAtLocation ?c ?l)\n\t\t)\n        :effect (and \n\t\t(inReceptacle ?o ?c)\n\t\t)\n)", "TurnOnObject_0": "(:action TurnOnObject_0\n        :parameters (?a - agent ?l - location ?o - object)\n\n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t(objectAtLocation ?o ?l)\n\t\t)\n        :effect (and \n\t\t(isOn ?o)\n\t\t)\n)", "GetObject1_0": "(:action GetObject1_0\n        :parameters (?o - object ?r - receptacle ?l - location ?a - agent)\n\n        :precondition (and \n\t\t(inReceptacle ?o ?r)\n\t\t(openable ?r)\n\t\t(objectType ?o TomatoType)\n\t\t(receptacleAtLocation ?r ?l)\n\t\t(holdsAny ?a)\n\t\t(atLocation ?a ?l)\n\t\t)\n        :effect (and \n\t\t(opened ?r)\n\t\t(holds ?a ?o)\n\t\t(not (inReceptacle ?o ?r))\n\t\t)\n)"}